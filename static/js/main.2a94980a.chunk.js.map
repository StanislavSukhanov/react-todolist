{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","_ref","count","react_default","a","createElement","TodoForm","_ref2","input","date","addTodo","reverse","ref","node","style","cursor","onClick","priority","value","Date","property","alert","Sort","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","event","sort","target","console","log","setState","preventDefault","options","disabled","selected","label","Component","Todo","_ref3","todo","remove","complete","className","completed","title","concat","getDate","getMonth","getFullYear","getHours","getMinutes","Todos","_ref4","todoList","todoListItems","map","App_Todo","TodoList","_this2","indexOfElement","bind","assertThisInitialized","handleRemove","handleComplete","handleAdd","handleSort","handleReverse","data","indexOfElem","forEach","item","index","splice","push","sortBy","b","App_Title","length","App_TodoForm","App_Sort","App_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a94980a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n// functional component, because it doesnt have it's own state \nconst Title = ({count}) => {\n  return(\n    <h1>My TodoList ({count})</h1>\n  );\n}\n\nconst TodoForm = ({addTodo, reverse}) => {\n  let input;\n  let date;\n\n  return(\n\n    <div>\n      <input ref={node => {\n      input = node;\n    }} />\n\n    <span style={{cursor: 'pointer'}} onClick={() => input.priority = 2}> ! </span>\n    <span style={{cursor: 'pointer'}} onClick={() => input.priority = 0}> - </span>\n    <span onClick={()=> reverse()}>reverse</span>\n\n    <button onClick={() => {\n      if(!input.value){ \n        alert('no value');\n        return;\n      }\n      date = new Date();\n\n      addTodo(input.value, input.priority, date);\n      input.value = '';                       // cleaning input field\n      delete input.property;                  // remove property from input object \n      }}>+</button>\n    \n    </div>\n  )\n}\n\n\nclass Sort extends Component {\n  constructor(props){\n    super(props);\n    this.state = {value: null};\n  }\n\n  handleChange(event){\n    this.props.sort(event.target.value);\n    console.log(event.target.value);\n    this.setState({value: event.target.value});\n\n  }\n\n  handleSubmit(event){\n    this.props.sort(this.state.value);\n    event.preventDefault();\n  }\n\n  render(){\n    const options = [\n      {value: '', disabled: true, selected: true, label: \"Sort by...\"},\n      {value: 'priority', label: \"Priority\"},\n      {value: 'date', label: \"Date\"},\n    ]\n    return(\n      <div>\n        <select options={options}></select>\n      </div>\n    )\n  }\n  \n}\n\nconst Todo = ({todo, remove, complete}) =>{\n  return(\n    // checking whether todo is completed or not \n    <li className={todo.completed? 'completed': null}>\n      <b style={{cursor:'pointer'}} onClick={() => {complete(todo)}}>V </b>\n      <span className={todo.completed? \"completed\": null }>{todo.title}</span>\n      <span>{` ${todo.priority}`}</span>\n      <span>{`${todo.date.getDate()}.${todo.date.getMonth() + 1}.${todo.date.getFullYear()} | ${todo.date.getHours()}:${todo.date.getMinutes()}`}</span>\n\n      <b style={{cursor:'pointer'}} onClick={() => {remove(todo)}}> X</b>\n    </li>\n  );\n}\n\nconst Todos = ({todoList, remove, complete}) =>{\n  // loop through all available todos\n  let todoListItems = todoList.map(todo => {\n    return <Todo todo={todo} remove={remove} complete={complete} />\n  });\n\n  return (<ul>{todoListItems}</ul>);\n}\n\nclass TodoList extends Component{\n  constructor(props){\n    super(props);\n    this.indexOfElement = this.indexOfElement.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleSort = this.handleSort.bind(this);\n    this.handleReverse = this.handleReverse.bind(this);\n    this.state = {\n      data: [\n        {title: \"say hello\", completed: false, priority: 1, date: new Date,},\n        {title: \"call mum\", completed: false, priority: 0, date: new Date,},\n        {title: \"kiss wife\", completed: false , priority: 2, date: new Date,},\n        {title: \"anything else?\", completed: false, priority: 1, date: new Date,}, \n      ]\n    }\n  }\n\n  indexOfElement(todo){\n    let data = this.state.data;\n    let indexOfElem = -1; \n    data.forEach((item, index) => {\n      if(item.title === todo.title){\n        indexOfElem = index;\n      }\n    })\n    return indexOfElem;\n  }\n\n  handleRemove(todo){\n    let data = this.state.data;\n    let indexOfElement = this.indexOfElement(todo);\n    data.splice(indexOfElement, 1);\n    this.setState({data:data});\n  }\n\n  handleComplete(todo){\n    let data = this.state.data;\n    let indexOfElement = this.indexOfElement(todo);\n    data.splice(indexOfElement, 1, {title: todo.title, completed: !todo.completed, priority: todo.priority, date: todo.date}); \n    // data.splice(indexOfElement, 1); \n    // data.push({title: todo.title, completed: !todo.completed, priority: todo.priority, date: todo.date});\n\n    console.log(data);\n    this.setState({data: data});\n  }\n\n  handleAdd(title, priority, date){\n    let data = this.state.data;\n    // adding additonal logic to test priority\n  \n    data.push({title: title,\n               completed: false, \n               priority: !priority? 1: priority,\n               date: date,\n              });\n    \n    console.log(data);\n    this.setState({data: data});\n  }\n\n  handleReverse(sortBy){\n    let data = this.state.data;\n    data.reverse();\n    this.setState({data: data});\n  }\n\n  // handleSort(sortBy){\n  //   let data = this.state.data;\n  //   data.sort(function(a, b){\n  //     return a.priority - b.priority;\n  //   });\n  //   this.setState({data:data});\n  // }\n\n  handleSort(sortBy){\n    let data = this.state.data;\n    data.sort(function(a, b){\n      return b[sortBy] - a[sortBy];\n    });\n    this.setState({data:data});\n  }\n\n\n\n  render(){\n    return(\n      <div>\n        <Title count={this.state.data.length} />\n        <TodoForm addTodo={this.handleAdd} reverse={this.handleReverse}/>\n        <Sort sort={this.handleSort}/>\n        <Todos todoList={this.state.data} remove={this.handleRemove} complete={this.handleComplete} />\n      {/* <h1>App works: todos left ({this.state.data.length})</h1> */}\n      </div>\n    )\n  }\n}\n\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}